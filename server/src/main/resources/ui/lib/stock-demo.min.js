// @nstream/stock-demo v4.0.0 (c) 2015-2023 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@swim/panel"), require("@swim/view"), require("@swim/dom"), require("@swim/graphics"), require("@swim/controller"), require("@swim/model"), require("@swim/ux"), require("@swim/theme"), require("@swim/client"), require("@swim/table"), require("@swim/uri"), require("@swim/component")) : typeof define === "function" && define.amd ? define([ "exports", "@swim/panel", "@swim/view", "@swim/dom", "@swim/graphics", "@swim/controller", "@swim/model", "@swim/ux", "@swim/theme", "@swim/client", "@swim/table", "@swim/uri", "@swim/component" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim["stock-demo"] = global.swim["stock-demo"] || {}), global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, panel, view, dom, graphics, controller, model, ux, theme, client, table, uri, component) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let StockRowController = (() => {
    var _a;
    let _classSuper = table.RowController;
    let _instanceExtraInitializers = [];
    let _leaf_decorators;
    let _leaf_initializers = [];
    let _trait_decorators;
    let _trait_initializers = [];
    let _symbolCell_decorators;
    let _symbolCell_initializers = [];
    let _priceCell_decorators;
    let _priceCell_initializers = [];
    let _volumeCell_decorators;
    let _volumeCell_initializers = [];
    let _movementCell_decorators;
    let _movementCell_initializers = [];
    return _a = class StockRowController extends _classSuper {
      constructor(trait, key) {
        super();
        this._classRemovalTimers = (__runInitializers(this, _instanceExtraInitializers), 
        {
          price: null,
          volume: null,
          movement: null
        });
        this.leaf = __runInitializers(this, _leaf_initializers, void 0);
        this.trait = __runInitializers(this, _trait_initializers, void 0);
        this.symbolCell = __runInitializers(this, _symbolCell_initializers, void 0);
        this.priceCell = __runInitializers(this, _priceCell_initializers, void 0);
        this.volumeCell = __runInitializers(this, _volumeCell_initializers, void 0);
        this.movementCell = __runInitializers(this, _movementCell_initializers, void 0);
        this.trait.set(trait);
        this.setKey(key);
      }
      updateRow(newRecord, oldRecord, isNew = false) {
        [ "price", "volume", "movement" ].forEach((key => {
          if (!newRecord.get(key).isDefinite()) {
            return;
          }
          const newValue = newRecord.get(key).stringValue("");
          const oldValue = oldRecord.get(key).stringValue();
          let content = "";
          switch (key) {
           case "price":
            {
              content = _a.formatPrice(newValue);
              break;
            }

           case "volume":
            {
              content = _a.formatVolume(newValue);
              break;
            }

           case "movement":
            {
              content = _a.formatMovement(newValue);
              break;
            }
          }
          this[`${key}Cell`].attachTrait().set({
            content: content
          });
          if (oldValue !== undefined && oldValue !== newValue && !isNew) {
            const change = Number.parseFloat(oldValue) < Number.parseFloat(newValue) ? "rising" : "falling";
            const cellView = this[`${key}Cell`].attachView();
            cellView.classList.remove(change === "rising" ? "falling" : "rising");
            cellView.classList.add(change);
            if (this._classRemovalTimers[key] !== null) {
              clearTimeout(this._classRemovalTimers[key]);
            }
            this._classRemovalTimers[key] = setTimeout((function() {
              cellView.classList.remove(change);
            }), 2e3);
          }
        }));
      }
      static formatPrice(str) {
        return `$${Number.parseFloat(str).toFixed(2)}`;
      }
      static formatVolume(str) {
        let intString = `${Number.parseFloat(str).toFixed(0)}`;
        if (intString.length < 4) {
          return intString;
        }
        let result = "";
        do {
          result = `${intString.length > 3 ? "," : ""}${intString.slice(-3)}${result}`;
          intString = intString.slice(0, -3);
        } while (intString.length);
        return result;
      }
      static formatMovement(str) {
        return `${Number.parseFloat(str).toFixed(2)}%`;
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _leaf_decorators = [ controller.TraitViewRef({
        viewType: table.LeafView,
        extends: true,
        initView(leafView) {
          super.initView(leafView);
          leafView.set({
            style: {
              height: "44px"
            }
          });
        }
      }) ];
      _trait_decorators = [ model.TraitRef({
        traitType: table.RowTrait,
        extends: true
      }) ];
      _symbolCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView
      }) ];
      _priceCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView
      }) ];
      _volumeCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView
      }) ];
      _movementCell_decorators = [ controller.TraitViewRef({
        traitType: table.TextCellTrait,
        viewType: table.TextCellView
      }) ];
      __esDecorate(null, null, _leaf_decorators, {
        kind: "field",
        name: "leaf",
        static: false,
        private: false,
        access: {
          has: obj => "leaf" in obj,
          get: obj => obj.leaf,
          set: (obj, value) => {
            obj.leaf = value;
          }
        },
        metadata: _metadata
      }, _leaf_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _trait_decorators, {
        kind: "field",
        name: "trait",
        static: false,
        private: false,
        access: {
          has: obj => "trait" in obj,
          get: obj => obj.trait,
          set: (obj, value) => {
            obj.trait = value;
          }
        },
        metadata: _metadata
      }, _trait_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _symbolCell_decorators, {
        kind: "field",
        name: "symbolCell",
        static: false,
        private: false,
        access: {
          has: obj => "symbolCell" in obj,
          get: obj => obj.symbolCell,
          set: (obj, value) => {
            obj.symbolCell = value;
          }
        },
        metadata: _metadata
      }, _symbolCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _priceCell_decorators, {
        kind: "field",
        name: "priceCell",
        static: false,
        private: false,
        access: {
          has: obj => "priceCell" in obj,
          get: obj => obj.priceCell,
          set: (obj, value) => {
            obj.priceCell = value;
          }
        },
        metadata: _metadata
      }, _priceCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _volumeCell_decorators, {
        kind: "field",
        name: "volumeCell",
        static: false,
        private: false,
        access: {
          has: obj => "volumeCell" in obj,
          get: obj => obj.volumeCell,
          set: (obj, value) => {
            obj.volumeCell = value;
          }
        },
        metadata: _metadata
      }, _volumeCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _movementCell_decorators, {
        kind: "field",
        name: "movementCell",
        static: false,
        private: false,
        access: {
          has: obj => "movementCell" in obj,
          get: obj => obj.movementCell,
          set: (obj, value) => {
            obj.movementCell = value;
          }
        },
        metadata: _metadata
      }, _movementCell_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let StockTableController = (() => {
    var _a;
    let _classSuper = table.TableController;
    let _instanceExtraInitializers = [];
    let _tableModel_decorators;
    let _tableModel_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _rows_decorators;
    let _rows_initializers = [];
    let _symbolsDownlink_decorators;
    let _symbolsDownlink_initializers = [];
    return _a = class StockTableController extends _classSuper {
      constructor() {
        super();
        this._didSync = (__runInitializers(this, _instanceExtraInitializers), false);
        this._symbolsVisibility = {};
        this.tableModel = __runInitializers(this, _tableModel_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.rows = __runInitializers(this, _rows_initializers, void 0);
        this.symbolsDownlink = __runInitializers(this, _symbolsDownlink_initializers, void 0);
        _a.initFasteners(this);
        const urlParams = new URLSearchParams(window.location.search);
        let host = urlParams.get("host");
        const baseUri = uri.Uri.parse(document.location.href);
        if (!host) {
          host = baseUri.base().withScheme(baseUri.schemeName === "https" ? "warps" : "warp").toString();
        }
        const nodeUri = "/symbols";
        this.symbolsDownlink.setHostUri(host);
        this.symbolsDownlink.setNodeUri(nodeUri);
        this.symbolsDownlink.open();
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _tableModel_decorators = [ component.Property({
        valueType: model.Model
      }) ];
      _table_decorators = [ controller.TraitViewRef({
        extends: true,
        traitWillAttachRow(rowTrait, targetTrait) {
          this.owner.rows.addTrait(rowTrait, targetTrait, rowTrait.key);
        }
      }) ];
      _header_decorators = [ controller.TraitViewControllerRef({
        extends: true
      }) ];
      _rows_decorators = [ controller.TraitViewControllerSet({
        extends: true,
        attachCellView(cellView, cellController, rowController) {
          console.log("cellView:", cellView);
          super.attachCellView(cellView, cellController, rowController);
          if (cellView.key === "a") {
            cellView.style.color.set("#989898");
          }
        },
        createController(trait) {
          var _b;
          const traitKey = (_b = trait === null || trait === void 0 ? void 0 : trait.key) !== null && _b !== void 0 ? _b : "";
          if (trait && traitKey) {
            const stockRowController = new StockRowController(trait, traitKey);
            stockRowController.setKey(traitKey);
            return stockRowController;
          }
          return super.createController(trait);
        }
      }) ];
      _symbolsDownlink_decorators = [ client.ValueDownlink({
        laneUri: `stocks`,
        didSet(newValue, oldValue) {
          var _b, _c, _d;
          const obj = newValue.toObject();
          const symbol = (_c = (_b = obj === null || obj === void 0 ? void 0 : obj["@update"]) === null || _b === void 0 ? void 0 : _b.key) !== null && _c !== void 0 ? _c : "";
          let rowController = this.owner.getChild(symbol, StockRowController);
          const isNew = !rowController;
          if (!rowController) {
            const rowModel = new model.Model;
            const rowTrait = new table.RowTrait;
            rowModel.setTrait(symbol, rowTrait);
            const symbolCell = rowTrait.getOrCreateCell("symbol", table.TextCellTrait);
            const priceCell = rowTrait.getOrCreateCell("price", table.TextCellTrait);
            const volumeCell = rowTrait.getOrCreateCell("volume", table.TextCellTrait);
            const movementCell = rowTrait.getOrCreateCell("movement", table.TextCellTrait);
            this.owner.tableModel.value.appendChild(rowModel);
            rowController = (_d = Object.values(this.owner.rows.controllers).find((c => (c === null || c === void 0 ? void 0 : c.key) === symbol))) !== null && _d !== void 0 ? _d : null;
            if (rowController) {
              rowController.symbolCell.setTrait(symbolCell);
              rowController.priceCell.setTrait(priceCell);
              rowController.volumeCell.setTrait(volumeCell);
              rowController.movementCell.setTrait(movementCell);
              [ "symbol", "price", "volume", "movement" ].forEach((function(key) {
                const cellView = Object.values(rowController.row.attachView().leaf.attachView().cells.views).find((v => (v === null || v === void 0 ? void 0 : v.key) === key));
                if (cellView) {
                  rowController[`${key}Cell`].setView(cellView, null, key);
                  if (key === "symbol") {
                    rowController.symbolCell.attachView().set({
                      content: symbol,
                      style: {
                        fontSize: "16px",
                        fontWeight: "900",
                        color: "#FBFBFB",
                        opacity: .9
                      }
                    });
                  } else {
                    cellView.set({
                      classList: [ `${key}Cell` ],
                      style: {
                        fontSize: "14px",
                        color: "#FBFBFB",
                        opacity: .8
                      }
                    });
                  }
                }
              }));
            }
          }
          rowController === null || rowController === void 0 ? void 0 : rowController.updateRow(newValue, oldValue, isNew);
        }
      }) ];
      __esDecorate(null, null, _tableModel_decorators, {
        kind: "field",
        name: "tableModel",
        static: false,
        private: false,
        access: {
          has: obj => "tableModel" in obj,
          get: obj => obj.tableModel,
          set: (obj, value) => {
            obj.tableModel = value;
          }
        },
        metadata: _metadata
      }, _tableModel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        },
        metadata: _metadata
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        },
        metadata: _metadata
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _rows_decorators, {
        kind: "field",
        name: "rows",
        static: false,
        private: false,
        access: {
          has: obj => "rows" in obj,
          get: obj => obj.rows,
          set: (obj, value) => {
            obj.rows = value;
          }
        },
        metadata: _metadata
      }, _rows_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _symbolsDownlink_decorators, {
        kind: "field",
        name: "symbolsDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "symbolsDownlink" in obj,
          get: obj => obj.symbolsDownlink,
          set: (obj, value) => {
            obj.symbolsDownlink = value;
          }
        },
        metadata: _metadata
      }, _symbolsDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let StockController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _tablePanel_decorators;
    let _tablePanel_initializers = [];
    let _tableController_decorators;
    let _tableController_initializers = [];
    return _a = class StockController extends _classSuper {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.tablePanel = __runInitializers(this, _tablePanel_initializers, void 0);
        this.tableController = __runInitializers(this, _tableController_initializers, void 0);
        const boardView = this.sheet.attachView();
        const panelView = this.panel.insertView(boardView);
        this.tablePanel.insertView(panelView);
        this.tableController.attachController();
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        createView() {
          const mainElement = document.createElement("main");
          const boardView = new panel.BoardView(mainElement).set({
            style: {
              width: "100%",
              flexGrow: 1,
              flexShrink: 1,
              flexBasis: "0px",
              margin: "0px",
              backgroundColor: "#181818",
              overflowX: "scroll"
            }
          });
          return boardView;
        }
      }) ];
      _panel_decorators = [ view.ViewRef({
        viewType: panel.PanelView,
        initView(panelView) {
          panelView.node.classList.add("stock-panel");
          this.owner.tablePanel.insertView(panelView);
        }
      }) ];
      _tablePanel_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          return panel.PanelView.create();
        },
        initView(panelView) {
          super.initView(panelView);
          panelView.node.classList.add("stock-tablePanel");
          panelView.node.style.backgroundColor = "#181818";
          panelView.node.style.overflowY = "scroll";
          panelView.set({
            unitWidth: 1,
            unitHeight: 1,
            minFrameWidth: 600
          });
        }
      }) ];
      _tableController_decorators = [ controller.ControllerRef({
        controllerType: StockTableController,
        extends: true,
        initController(controller) {
          const tableModel = new model.Model;
          tableModel.mount();
          const tableTrait = new ux.TableTrait;
          tableModel.setTrait("table", tableTrait);
          tableTrait.header.insertTrait();
          tableTrait.appendTrait(ux.TextColTrait, "symbol").set({
            layout: {
              key: "symbol",
              grow: 3,
              textColor: theme.Look.labelColor
            },
            label: "Symbol"
          });
          tableTrait.appendTrait(ux.TextColTrait, "price").set({
            layout: {
              key: "price",
              grow: 3,
              textColor: theme.Look.labelColor
            },
            label: "Price"
          });
          tableTrait.appendTrait(ux.TextColTrait, "volume").set({
            layout: {
              key: "volume",
              grow: 4,
              textColor: theme.Look.labelColor
            },
            label: "Volume"
          });
          tableTrait.appendTrait(ux.TextColTrait, "movement").set({
            layout: {
              key: "movement",
              grow: 3,
              textColor: theme.Look.labelColor
            },
            label: "Movement"
          });
          controller.mount();
          controller.tableModel.set(tableModel);
          controller.table.insertView(this.owner.tablePanel.attachView());
          controller.table.setTrait(tableTrait);
        }
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        },
        metadata: _metadata
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        },
        metadata: _metadata
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tablePanel_decorators, {
        kind: "field",
        name: "tablePanel",
        static: false,
        private: false,
        access: {
          has: obj => "tablePanel" in obj,
          get: obj => obj.tablePanel,
          set: (obj, value) => {
            obj.tablePanel = value;
          }
        },
        metadata: _metadata
      }, _tablePanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tableController_decorators, {
        kind: "field",
        name: "tableController",
        static: false,
        private: false,
        access: {
          has: obj => "tableController" in obj,
          get: obj => obj.tableController,
          set: (obj, value) => {
            obj.tableController = value;
          }
        },
        metadata: _metadata
      }, _tableController_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let AppController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _appBarView_decorators;
    let _appBarView_initializers = [];
    return _a = class AppController extends _classSuper {
      constructor() {
        super();
        this.appBarView = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _appBarView_initializers, void 0));
        this.initBoard();
      }
      initBoard() {
        const boardView = this.sheet.attachView().set({
          style: {
            width: "100%",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "flex-start",
            alignItems: "flex-start",
            boxSizing: "border-box"
          }
        });
        boardView.node.style.backgroundColor = "#181818";
        this.appBarView.insertView(boardView);
        const stockController = new StockController;
        stockController.sheet.insertView(this.sheet.attachView(), null, null, "stockController");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _appBarView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const nav = document.createElement("nav");
          nav.style.backgroundColor = "#181818";
          return new dom.HtmlView(nav).set({
            style: {
              width: "100%",
              height: "auto",
              flexGrow: 0,
              flexShrink: 0,
              flexBasis: "auto",
              boxSizing: "border-box",
              paddingTop: "16px",
              paddingRight: "48px",
              paddingBottom: "16px",
              paddingLeft: "16px"
            }
          });
        },
        initView(appBarView) {
          const container = appBarView.appendChild("div").set({
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-start",
              alignItems: "flex-start",
              boxSizing: "border-box"
            }
          });
          container.insertChild(graphics.HtmlIconView, null, "nStreamIcon").setIntrinsic({
            graphics: graphics.VectorIcon.create(64, 64, "M0,0H64V64H0Z M5,5V59H59V5Z M44,38.78V46L25,29.55V46H20V18Z M39,25V18H44V29.33Z"),
            style: {
              width: "48px",
              height: "48px",
              marginRight: "16px"
            },
            classList: [ "n-stream-icon" ]
          });
          const detailsContainer = container.appendChild("div", "app-bar-details-container").setIntrinsic({
            style: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              flexBasis: "0px",
              flexGrow: 1,
              flexShrink: 1,
              justifyContent: "space-between",
              alignItems: "flex-start"
            }
          });
          const detailsTopRow = detailsContainer.appendChild("div").set({
            style: {
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
              alignItems: "flex-end",
              width: "100%"
            }
          });
          const demoTitle = detailsTopRow.appendChild("h1").set({
            style: {
              width: "auto",
              fontWeight: "400",
              fontSize: "18px",
              lineHeight: "24px",
              color: "#FFFFFF",
              margin: "0px",
              boxSizing: "border-box"
            }
          });
          demoTitle.node.innerText = "Stock Demo";
          const indexTitle = detailsTopRow.appendChild("h1").set({
            style: {
              width: "auto",
              fontWeight: "600",
              fontSize: "20px",
              lineHeight: "24px",
              color: "#FFFFFF",
              margin: "0px",
              boxSizing: "border-box"
            }
          });
          indexTitle.node.innerText = "S&P 500";
          const detailsBottomRow = detailsContainer.appendChild("div").set({
            style: {
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
              alignItems: "flex-end",
              width: "100%"
            }
          });
          const subtitle = detailsBottomRow.appendChild("p").set({
            style: {
              fontWeight: "400",
              fontSize: "12px",
              lineHeight: "17px",
              color: "#FFFFFF",
              boxSizing: "border-box",
              marginTop: "8px",
              marginRight: "0px",
              marginBottom: "0px",
              marginLeft: "0px"
            }
          });
          subtitle.node.innerText = "v1.0.0";
        }
      }) ];
      __esDecorate(null, null, _appBarView_decorators, {
        kind: "field",
        name: "appBarView",
        static: false,
        private: false,
        access: {
          has: obj => "appBarView" in obj,
          get: obj => obj.appBarView,
          set: (obj, value) => {
            obj.appBarView = value;
          }
        },
        metadata: _metadata
      }, _appBarView_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  exports.AppController = AppController;
  exports.StockController = StockController;
  exports.StockRowController = StockRowController;
  exports.StockTableController = StockTableController;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=stock-demo.min.js.map
